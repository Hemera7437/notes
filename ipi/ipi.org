#+AUTHOR: Robin Heinemann
#+TITLE: Einführung in die Anwendungsorientierte Informatik (Köthe)
#+LATEX_HEADER: \usepackage{siunitx}%
#+LATEX_HEADER: \usepackage{fontspec}%
#+LATEX_HEADER: \sisetup{load-configurations = abbrevations}%
#+LATEX_HEADER: \newcommand{\estimates}{\overset{\scriptscriptstyle\wedge}{=}}%
#+LATEX_HEADER: \usepackage{mathtools}%
#+LATEX_HEADER: \DeclarePairedDelimiter\abs{\lvert}{\rvert}%
#+LATEX_HEADER: \DeclarePairedDelimiter\norm{\lVert}{\rVert}%
#+LATEX_HEADER: \DeclareMathOperator{\Exists}{\exists}%
#+LATEX_HEADER: \DeclareMathOperator{\Forall}{\forall}%
#+LATEX_HEADER: \def\colvec#1{\left(\vcenter{\halign{\hfil$##$\hfil\cr \colvecA#1;;}}\right)}
#+LATEX_HEADER: \def\colvecA#1;{\if;#1;\else #1\cr \expandafter \colvecA \fi}
#+LATEX_HEADER: \usepackage{minted}
#+LATEX_HEADER: \usepackage{makecell}
# #+LATEX_HEADER: \usemintedstyle{tango}
#+LATEX_HEADER: \usemintedstyle{perldoc}
#+LATEX_HEADER: \usepackage{tikz}
#+LATEX_HEADER: \usetikzlibrary{arrows,automata}

# #+BEGIN_SRC cpp
# for(int i = 0; i < 5) {
#    std::cout << i << std::endl;
# }
# #+END_SRC

* Klausur 09.02.2016

* Was ist Informatik?
  "Kunst" Aufgaben mit Computerprogrammen zu lösen.
** Teilgebiete
*** theoretische Informatik (*ITH*)
    - Berechenbarkeit: Welche Probleme kann man mit Informatik lösen und welche prinzipiell nicht?
    - Komplexität: Welche Probleme kann man effizient lösen?
    - Korrektheit: Wie beweist man, dass das Ergebnis richtig ist? \\
      Echtzeit: Dass das richtige Ergebnis rechtzeitig vorliegt.
    - verteilte Systeme: Wie sichert man, dass verteilte Systeme korrekt kommunizieren?
*** technische Informatik (*ITE*)
	- Auf welcher Hardware kann man Programme ausführen, wie baut man dies Hardware?
	- CPU, GPU, RAM, HD, Display, Printer, Networks
*** praktische Informatik
	- Wie entwickelt man Software?
	- Programmiersprachen und Compiler: Wie kommuniziert der Programmierer mit der Hardware?\hfill *IPI*, *IPK*
	- Algorithmen und Datenstrukturen: Wie baut man komplexe Programme aus einfachen Grundbausteinen?\hfill *IAL*
	- Softwaretechnik: Wie organisiert man sehr große Projekte?\hfill *ISW*
	- Kernanwendung der Informatik: Betriebsysteme, Netzwerke, Parallelisierung\hfill *IBN*
	  - Datenbanksysteme\hfill *IDB1*
	  - Graphik, Graphische Benutzerschnittstellen\hfill *ICG1*
	  - Bild- und Datenanalyse
	  - maschinelles Lernen
	  - künstliche Intelligenz
*** angewante Informatik
	- Wie löst man Probleme aus einem anderem Gebiet mit Programmen?
	- Informationstechnik
	  - Buchhandlung, e-commerce, Logistik
	- Web programming
	- scientific computing für Physik, Biologie
	- Medizininformatik
	  - bildgebende Verfahren
	  - digitale Patientenakte
	- computer linguistik
	  - Sprachverstehen, automatische Übersetzung
	- Unterhaltung: Spiele, special effect im Film
* Wie unterscheidet sich Informatik von anderen Disziplinen?
** Mathematik
   Am Beispiel der Definition $a \leq b: \exists c \geq 0: a + c = b$
   Informatik: Lösungsverfahren: $a - b \leq 0$, das kann man leicht ausrechen, wenn man subtrahieren und mit $0$ vergleichen kann.
   Quadratwurzel: $y = \sqrt{x} \Leftrightarrow y \geq 0 \wedge y^2 = x (\Rightarrow x > 0)$
   Informatik: Algorithmus aus der Antike: $y = \frac{x}{y}$
   iteratives Verfahren: Initial Guess $y^{(0)} = 1$
   schrittweise Verbesserung $y^{(t+1)} = \frac{y^{(t)} + \frac{x}{y^{(t)}}}{2}$
* Informatik
  Lösugswege, genauer Algorithmen
** Algorithmus
   *schematische* Vorgehensweise mit der jedes Problem einer bestimmten *Klasse* mit *endliche* vielen *elementaren* Schritten / Operationen gelöst werden kann
   - schematisch: man kann den Algorithmus ausführen, ohne ihn zu verstehen ($\Rightarrow$ Computer)
   - alle Probleme einer Klasse: zum Beispiel: die Wurzel aus jeder beliebigen nicht-negativen Zahl, und nicht nur $\sqrt{11}$
   - endliche viele Schritte: man kommt nach endlicher Zeit zur Lösung
   - elementare Schrite / Operationen: führen die Lösung auf Operationen oder Teilprobleme zurück, die wir schon gelöst haben
** Daten
   Daten sind Symbole,
   - die Entitäten und Eigenschaften der realen Welt im Computer representieren.
   - die interne Zwischenergebnisse eines Algorithmus aufbewahren
   $\Rightarrow$ Algorithmen transformieren nach bestimmten Regeln die Eingangsdaten (gegebene Symbole) in Ausgangsdaten (Symbole für das Ergebniss).
   Die Bedeutung / Interpretation der Symbole ist dem Algorithmus egal $\estimates$ "schematisch"
*** Beispiele für Symbole
	- Zahlen
	- Buchstaben
	- Icons
	- Verkehrszeichen
    aber: heutige Computer verstehen nur Binärzahlen $\Rightarrow$ alles andere muss man übersetzen
	Eingansdaten: "Ereignisse":
	- Symbol von Festplatte lesen oder per Netzwerk empfangen
	- Benutzerinteraktion (Taste, Maus, ...)
	- Sensor übermittelt Meßergebnis, Stoppuhr läuft ab
    Ausgangsdaten: "Aktionen":
	- Symbole auf Festplatte schreiben, per Netzwerk senden
	- Benutzeranzeige (Display, Drucker, Ton)
	- Stoppuhr starten
	- Roboteraktion ausführen (zum Beispiel Bremsassistent)
	Interne Daten:
	- Symbole im Hauptspeicher oder auf Festplatte
	- Stoppuhr starten / Timeout
** Einfachster Computer
   endliche Automaten (endliche Zustandsautomaten)
   - befinden sich zu jedem Zeitpunkt in einem bestimmten Zustand aus einer vordefinierten endlichen Zustandsmenge
   - äußere Ereignisse können Zustandsänderungen bewirken und Aktionen auslösen
*** TODO Graphische Darstellung
	graphische Darstellung: Zustände = Kreise, Zustandsübergänge: Pfeile
*** TODO Darstellung durch Übergangstabellen
	Zeilen: Zustände, Spalten: Ereignisse, Felder: Aktion und Folgezustände
    | Zustände \ Ereignisse | Knopf drücken                                     | Timeout                                                   | Timeout(Variante)                       |
    |-----------------------+---------------------------------------------------+-----------------------------------------------------------+-----------------------------------------|
    | aus                   | \Rightarrow{halb} \\ {4 LEDs an}                 | %                                                         | (\Rightarrow{aus},{nichts})             |
    | halb                  | (\Rightarrow{voll},{8 LEDs an})                   | %                                                         | (\Rightarrow{aus},{nichts})             |
    | voll                  | (\Rightarrow{blinken an},{Timer starten})         | %                                                         | (\Rightarrow{aus},{nichts})             |
    | blinken an            | (\Rightarrow{aus},{Alle LEDs aus, Timer stoppen}) | (\Rightarrow{blinken aus},{alle LEDs aus, Timer starten}) | (\Rightarrow{blinken aus},{8 LEDs aus}) |
    | blinken aus           | (\Rightarrow{aus},{Alle LEDs aus, Timer stoppen}) | (\Rightarrow{blinken an},{alle LEDs an, Timer starten})   | (\Rightarrow{blinken an},{8 LEDs an})   |

	Variante: Timer läuft immer (Signal alle 0.3s) \Rightarrow Timout ignorieren im Zustand "aus", "halb", "voll"
*** Beispiel 2:
	\begin{align}
	&1~0~1~1~0~1~0 &= 2 + 8 + 16 + 74 &= 90_{\text{dez}} \\
	+&0~1~1~1~0~0~1 &= 1 + 8 + 16 + 32 &= 57_{\text{dez}} \\
	\hline
	1~&0~0~1~0~0~1~1 &= 1 + 2 + 16 + 128 &= 147_{\text{dez}}\checkmark
	\end{align}
**** Implementation mit Endlichen Automaten
	 Prinzipen:
	 - wir lesen die Eingangsdaten von rechts nach links
	 - Beide Zahlen gleich lang (sonst mit 0en auffüllen)
	 - Ergebnis wird von rechts nach link ausgegeben
**** TODO Skizze der Automaten
     | Zustand   | Ereignis    | Ausgeben |
     |-----------+-------------+----------|
     | start     | (0,1)       | "1"      |
     | start     | (1,0)       | "1"      |
     | start     | (0,0)       | "0"      |
     | start     | (1,1)       | "0"      |
     | carry = 1 | (1,1)       | "1"      |
     | carry = 1 | (0,1)       | "0"      |
     | carry = 1 | (1.0)       | "0"      |
     | carry = 1 | $\emptyset$ | "1"      |
	 *Wichtig:* In jedem Zustand muss für *alle möglichen* Ereignisse eine Aktion und Folgezustand definiert werden.
	 Vergisst man ein Ereignis zeigt der Automat undefiniertes Verhalten, also ein "Bug"
	 Falls keine sinvolle Reaktion möglich ist: neuer Zustand: "Fehler" \Rightarrow Übergang nach "Fehler", Aktion: ausgeben einer Fehlermeldung
***** TODO Skizze Fehlermeldung
	  Ein endlicher Automat hat nur ein Speicherelement, das den aktuelen Zustand angibt. Folge:
	  - Automat kann sich nicht merken, wie er in den aktuellen Zustand gekommen ist ("kein Gedächnis")
	  - Automat kann nicht beliebig weit zählen, sondern nur bis zu einer vorgegebenen Grenze
\begin{center}
\begin{tikzpicture}[->,>=stealth',shorten >=1pt,auto,node distance=2.8cm, semithick]
\node[initial,state] (0) {"0"};
\node[state] (1) [right of=0] {"1"};
\node[state] (2) [right of=1]{"2"};
\node[state] (3) [right of=2]{"3"};
\node[accepting,state] [below of=1] (end) {"stop"};
\path (0) edge [loop above] node {"0"} (0)
(0) edge node {"x"} (1)
(0) edge node {$\emptyset$} (end)
(1) edge [loop above] node {"0"} (1)
(1) edge node {"x"} (2)
(1) edge node {$\emptyset$} (end)
(2) edge [loop above] node {"0"} (2)
(2) edge node {"x"} (3)
(2) edge node {$\emptyset$} (end)
(3) edge [loop above] node {"$0\vee x$"} (3)
(3) edge node {"x"} (3)
(3) edge node {$\emptyset$} (end);
\end{tikzpicture}
\end{center}
      Insgesamt: Man kann mit endlichen Automaten nur relativ einfache Algorithmen implementieren. (nur reguläre Sprachen)
	  Spendiert man zusätzlichen Specher, geht mehr:
	  - Automat mit Stak-Speicher (Stapel oder Keller) \Rightarrow Kellerautomat (Kontextfreie Sprachen)
	  - Automat mit zwei Stacks oder äquivalent Turing-Maschine kann alles auführen, was man intuitiv für berechenbar hält
      Markov Modelle: endliche Automaten mit probabilistischen Übergangen.
	  Bisher: Algorithmen für einen bestimmten Zweck (Problemklasse)
	  Frage: Gibt es einen universellen Algorithms für alle berechenbare Probleme?
	  Betrache formale Algorithmusbeschribung als Teil der Eingabe des universellen Algorithmus.
* Substitutionsmodell (funktionale Programmierung)
  - einfaches Modell für arithmetische Berechnung "Taschenrechner"
  - Eingaben und Ausgaben sind Zahlen (ganze oder reelle Zahlen). Zahlenkonstanten heißten "Literale"
  - elementare Funktionen: haben eine oder mehere Zahlen als Argumente (Parameter) und liefern eine Zahl als Ergebnis (wie Mathematik):
	- add(1,2) \rightarrow 3, mul(2,3) \rightarrow 6, analog sub(), div(), mod()
  - Funktionsaufrufe können verschachtelt werden, das heißt Argumente kann Ergebnis einer anderen Funktion sein
	- mul(add(1,2),sub(5,3)) \rightarrow 6
** Substitutionsmodell
   Man kann einen Funktionsaufruf, deessen Argument vekannt ist (das heißt Zahlen sind) durch den Wert des Ergebnisses ersetzen ("substituieren"). Geschachtelte Ausdrücke lassen sich so von innen nach außen auswerten.
   \[mul(add(1,2),sub(5,3))\]
   \[mul(3,sub(5,3))\]
   \[mul(3,2)\]
   \[6\]
   - Die arithmetischen Operationene add(), sub(), mul(), div(), mod() werden normalerweise von der Hardware implementiert.
   - Die meisten Programmiersprachen bieten außerdem algebraische Funktionen wie: sqrt(), sin(), cos(), log()
	 - sind meist nicht in Hardware, aber vorgefertigte Algorithmen, werden mit Programmiersprachen geliefert, "Standardbibilothek"
   - in C++: mathematisches Modul des Standardbibilothek: "cmath"
   - Für Arithmetik gebräuchlicher ist "Infix-Notation" mit Operator-Symbolen "+", "-", "*", "/", "%"
   - mul(add(1,2),sub(5,3)) \Leftrightarrow ((1+2)*(5-3))
	 - oft besser, unter anderem weil man Klammer weglassen darf
	   1. "Punkt vor Strichrechnung" 3+4*5 \Leftrightarrow 3+(4*5), mul, div, mod binden stärker als add,sub
	   2. Operatoren gleicher Präzedenz werden von links nach rechts ausgeführt (links-assoziativ) \\
		  1+2+3-4+5 \Leftrightarrow ((((1+2)+3)-4)+5)
	   3. äußere Klammer kann man weglassen (1+2)\Leftrightarrow 1+2
   - Computer wandeln Infix zuerst in Prefix Notation um
	 1. weggelassene Klammer weider einfüger
	 2. Operatorensymbol durch Funktionsnamen ersetzen und an Prefix-Position verschieben
		\[1 + 2 + 3 * 4 / (1 + 5) - 2\]
		\[(((1 + 2) + ((3 * 4) / (1 + 5))) - 2)\]
		\[sub(add(add(1,2),div(mul(3,4),add(1,5))), 2)\]
		\[sub(add(3,div(12,6)), 2)\]
		\[sub(add(3,2), 2)\]
		\[sub(5, 2)\]
		\[2\]
